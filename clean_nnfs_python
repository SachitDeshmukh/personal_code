# -*- coding: utf-8 -*-
"""
Created on Mon Jan 27-01-2025 19:54
@author: Sachit Deshmukh
Purpoe: Document the cleaned code for simulating Neural Networks in Python
"""

# importing all the important libraries and functions
import math
import numpy as np
import nnfs
from nnfs.datasets import spiral_data

# setting the random.seed and data type
nnfs.init()

# defining the important object classes, attributes, and methods
class Layer_Dense:
    def __init__(self, n_inputs, n_neurons):
        self.weights = 0.10*np.random.randn(n_inputs, n_neurons)
        self.biases = np.zeros((1, n_neurons))
    
    def forward(self, inputs):
        self.output = np.dot(inputs, self.weights) + self.biases

class Activation_ReLU:
    def forward(self, inputs):
        self.output = np.maximum(0, inputs)
        
class Activation_Softmax:
    def forward(self, inputs):
        exp_values = np.exp(inputs - np.max(inputs, axis=1, keepdims=True))
        prob_values = exp_values/np.sum(exp_values, axis=1, keepdims=True)
        self.output = prob_values

# creating a custom dataset
X, y = spiral_data(samples=100, classes=3)

# creating the neural network's neurons
dense1 = Layer_Dense(2, 3)
activation1 = Activation_ReLU()
dense2 = Layer_Dense(3, 3)
activation2 = Activation_Softmax()

# passing data through the neural network
dense1.forward(X) #got values for layer 1 neurons from input, weight product plus biases
activation1.forward(dense1.output) #got activation values within range 0 and value for layer 1 neurons
dense2.forward(activation1.output) #got values for layer 2 neurons from activation inputs, weights product plus neuron biases
activation2.forward(dense2.output) #got output values as probabilities for output neurons
